package com.think.junit.test;

import org.hamcrest.Matchers;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import static org.hamcrest.MatcherAssert.assertThat;

/**
 * @Test ?timeout ??????????????????????????????????????????JUnit???
 * ????????????????????????????????????????????????????????????
 * ?????
 *
 * @Rule ??????????????????????????????????????
 *
 * ?????????????????????????@Before?@After,????????????????@After????????
 */
public class TestTimeOut {
    public static String log;
    private CountDownLatch latch = new CountDownLatch(1);

    private long before = 0l;

    @Before public void before() {
        before = System.currentTimeMillis();
        System.out.println("before----" + before);
    }

    @After public void after() {
        long after = System.currentTimeMillis();
        System.out.println("after----" + after + " diff----" + (after - before) / 1000);
    }

    @Rule
    public Timeout globalTimeout = Timeout.seconds(5);

    @Test public void testSleepForTooLong() throws Exception {
        log += "ran1";
        TimeUnit.SECONDS.sleep(10);
    }

    @Test public void testBlockForever() throws Exception {
        log += "ran2";
        latch.await();
    }

    @Test(timeout = 2000) public void testTimeoutParameter() throws Exception {
        log += "ran3";
        TimeUnit.SECONDS.sleep(10);
    }

    @Test public void testNoBlockAndSleep() {
        log += "ran4";
        assertThat(log, Matchers.containsString("ran4"));
    }
}
